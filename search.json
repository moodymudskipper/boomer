[{"path":"https://moodymudskipper.github.io/boomer/articles/how-boomer-works.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"How boomer works","text":"important principle {boomer} don’t modify body function rig. Instead copy original function give new environment. new environment child original environment, populated shims functions called original function. call environment mask. rig_impl() job main function package. calls wrap(), important function, whose mission build verbose shims functions used rigged function. detailed thereafter.","code":"rigged_file_ext <- boomer::rig(tools::file_ext) tools::file_ext #> function (x)  #> { #>     pos <- regexpr(\"\\\\.([[:alnum:]]+)$\", x) #>     ifelse(pos > -1L, substring(x, pos + 1L), \"\") #> } #> <bytecode: 0x558374959180> #> <environment: namespace:tools> rigged_file_ext #> function (x)  #> { #>     pos <- regexpr(\"\\\\.([[:alnum:]]+)$\", x) #>     ifelse(pos > -1L, substring(x, pos + 1L), \"\") #> } #> <environment: 0x558374a35e80> # the original environment environment(tools::file_ext) #> <environment: namespace:tools>  # our new environment env <- environment(rigged_file_ext) env #> <environment: 0x558374a35e80>  # its parent parent.env(env) #> <environment: namespace:tools>  # its content ls(env) #>  [1] \"-\"         \"::\"        \":::\"       \"(\"         \"{\"         \"+\"         #>  [7] \"<-\"        \"=\"         \">\"         \"ifelse\"    \"regexpr\"   \"substring\""},{"path":[]},{"path":"https://moodymudskipper.github.io/boomer/articles/how-boomer-works.html","id":"boom-and-rig","dir":"Articles","previous_headings":"Individual functions","what":"boom() and rig()","title":"How boomer works","text":"boom() wrapper around rig_impl() , rigs calling function runs call, also hacky code can pipe boom() {magrittr} (hack needed base pipe)","code":""},{"path":"https://moodymudskipper.github.io/boomer/articles/how-boomer-works.html","id":"rig_impl","dir":"Articles","previous_headings":"Individual functions","what":"rig_impl()","title":"How boomer works","text":"’s diagram dependencies rig_impl() rig_impl() : Creates new environment (mask) child original environment Populates shims :: ::: find pkg::fun pkg:::fun original function don’t wrap output :: ::: operator Populates shims <- = functions created original function, thus impossible shim “rig time”, can made verbose . Populates shims called functions, using wrap() Creates special variables ..FIRST_CALL.. ..EVALED_ARGS.. environment, ..FIRST_CALL.. boolean initiated TRUE set FALSE first wrapper call triggered, ..EVALED_ARGS.. named logical vector keeps track arguments evaled.","code":"flow::flow_view_deps(boomer:::rig_impl, show_imports = \"packages\") #> PhantomJS not found. You can install it with webshot::install_phantomjs(). If it is installed, please make sure the phantomjs executable can be found via the PATH variable. #> Error in knitr::include_graphics(png): Cannot find the file(s): \"/tmp/RtmppMvI8C/flow_38dc3ad6cec6.png\""},{"path":"https://moodymudskipper.github.io/boomer/articles/how-boomer-works.html","id":"wrap","dir":"Articles","previous_headings":"Individual functions","what":"wrap()","title":"How boomer works","text":"wrap() builds verbose wrapper functions. main aim print information directly related wrapped function (e.g. argument values execution time). However couple things: wrapper function first called prints information signaling entering rig function, sets rigged function exit print information exiting . uses ..FIRST_CALL.. special variable introduced section. checks rigged function’s arguments evaluated (remember R arguments evaluated unless values requested line) prints . uses `..EVALED_ARGS..`` special variable introduced section.","code":""},{"path":"https://moodymudskipper.github.io/boomer/articles/how-boomer-works.html","id":"rig_in_namespace","dir":"Articles","previous_headings":"Individual functions","what":"rig_in_namespace()","title":"How boomer works","text":"rig_in_namespace() calls rig_impl() inputs unlike rig() want rigged functions bound namespace instead original functions. unlock namespace assigned rigged functions . Since rig_in_namespace() accepts several functions arguments, might call , also make sure include wrapped versions rigged functions masks.","code":""},{"path":"https://moodymudskipper.github.io/boomer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Antoine Fabri. Author, maintainer.","code":""},{"path":"https://moodymudskipper.github.io/boomer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fabri (2025). boomer: Debugging Tools Inspect Intermediate Steps Call. R package version 0.2.0, https://moodymudskipper.github.io/boomer/.","code":"@Manual{,   title = {boomer: Debugging Tools to Inspect the Intermediate Steps of a Call},   author = {Antoine Fabri},   year = {2025},   note = {R package version 0.2.0},   url = {https://moodymudskipper.github.io/boomer/}, }"},{"path":"https://moodymudskipper.github.io/boomer/index.html","id":"boomer-","dir":"","previous_headings":"","what":"Debugging Tools to Inspect the Intermediate Steps of a Call","title":"Debugging Tools to Inspect the Intermediate Steps of a Call","text":"{boomer} package provides debugging tools let inspect intermediate results call. output looks explode call parts hence name. boom() prints intermediate results call code chunk. rig() creates copy function display intermediate results calls body. rig_in_namespace() rigs namespaced function place, always verbose even called existing functions. especially handy package development.","code":""},{"path":"https://moodymudskipper.github.io/boomer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Debugging Tools to Inspect the Intermediate Steps of a Call","text":"Install CRAN version : development version :","code":"install.packages(\"boomer\") remotes::install_github(\"moodymudskipper/boomer\")"},{"path":"https://moodymudskipper.github.io/boomer/index.html","id":"boom","dir":"","previous_headings":"","what":"boom()","title":"Debugging Tools to Inspect the Intermediate Steps of a Call","text":"can use boom() {magrittr} pipes base R pipes: just pipe boom() end pipe chain.  call fails, {boomer} print intermediate outputs occurrence error, can help debugging:  boom() features optional arguments : clock: set TRUE see long step (isolation!) took run. print: set function str change printed (see ?boom see print differently depending class). Useful alternatives dplyr::glimpse invisible (print nothing). One use case output long.  boom() also works works loops multi-line expression.","code":"library(boomer) boom(1 + !1 * 2) boom(subset(head(mtcars, 2), qsec > 17)) library(magrittr) mtcars %>%   head(2) %>%   subset(qsec > 17) %>%   boom() \"tomato\" %>%   substr(1, 3) %>%   toupper() %>%   sqrt() %>%   boom() boom(lapply(head(cars), sqrt), clock = TRUE, print = str) boom(for(i in 1:3) paste0(i, \"!\"))"},{"path":"https://moodymudskipper.github.io/boomer/index.html","id":"rig","dir":"","previous_headings":"","what":"rig()","title":"Debugging Tools to Inspect the Intermediate Steps of a Call","text":"rig() function order boom() body, arguments printed default ’re evaluated.","code":"hello <- function(x) {   if(!is.character(x) | length(x) != 1) {     stop(\"`x` should be a string\")   }   paste0(\"Hello \", x, \"!\") } rig(hello)(\"world\")"},{"path":"https://moodymudskipper.github.io/boomer/index.html","id":"rig_in_namespace","dir":"","previous_headings":"","what":"rig_in_namespace()","title":"Debugging Tools to Inspect the Intermediate Steps of a Call","text":"rig() creates copy function, developing package might want rig function place verbose output called functions. can use rig_in_namespace(). instance might functions package : cylinder_vol depends disk_area, call devtools::load_all() rig_in_namespace() enjoy detailed output:","code":"cylinder_vol <- function(r, h) {   h * disk_area(r) }  disk_area <- function(r) {   pi * r^2 } devtools::load_all() rig_in_namespace(cylinder_vol, disk_area) cylinder_vol(3,10)"},{"path":"https://moodymudskipper.github.io/boomer/index.html","id":"boom_on-and-boom_off","dir":"","previous_headings":"","what":"boom_on() and boom_off()","title":"Debugging Tools to Inspect the Intermediate Steps of a Call","text":"debugging function, call boom_on() subsequent calls boomed, call boom_off() return standard debugging.","code":""},{"path":"https://moodymudskipper.github.io/boomer/index.html","id":"boom_shinyapp","dir":"","previous_headings":"","what":"boom_shinyApp()","title":"Debugging Tools to Inspect the Intermediate Steps of a Call","text":"experimental feature allows rig reactives shiny app. See vignette(\"shiny\", \"boomer\") information. following app, saved proper project/package: output boom_shinyApp(ui, server) look like:  issues, please report!","code":"histogramUI <- function(id) {   tagList(     selectInput(NS(id, \"var\"), \"Variable\", choices = names(mtcars)),     numericInput(NS(id, \"bins\"), \"bins\", value = 10, min = 1),     plotOutput(NS(id, \"hist\"))   ) }  histogramServer <- function(id) {   moduleServer(id, function(input, output, session) {     data <- reactive(mtcars[[input$var]])     output$hist <- renderPlot({       hist(data(), breaks = input$bins, main = input$var)     }, res = 96)   }) }  ui <- fluidPage(   histogramUI(\"hist1\") ) server <- function(input, output, session) {   histogramServer(\"hist1\") }"},{"path":"https://moodymudskipper.github.io/boomer/index.html","id":"addin","dir":"","previous_headings":"","what":"Addin","title":"Debugging Tools to Inspect the Intermediate Steps of a Call","text":"avoid typing boom() time can use provided addin named “Explode call boom()”: just attribute key combination (use ctrl+shift+alt+B windows), select call ’d like explode fire away!","code":""},{"path":"https://moodymudskipper.github.io/boomer/index.html","id":"options","dir":"","previous_headings":"","what":"Options","title":"Debugging Tools to Inspect the Intermediate Steps of a Call","text":"Several options proposed weak printed output {boomer}’s functions addin, see ?boomer learn . particular operating systems {boomer}’s functions’ output might always look good markdown report reprexes. ’s due system handles UTF-8 characters. case one can use options(boomer.safe_print = TRUE) satisfactory input.","code":""},{"path":"https://moodymudskipper.github.io/boomer/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"Debugging Tools to Inspect the Intermediate Steps of a Call","text":"{boomer} prints output intermediate steps executed, thus doesn’t say anything isn’t executed, contrast functions like lobstr::ast() return parse tree. Thanks @data_question suggesting name {boomer} twitter.","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boom.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the Output of Intermediate Steps of a Call — boom","title":"Print the Output of Intermediate Steps of a Call — boom","text":"boom() prints intermediate results call code chunk. rig() creates copy function display intermediate results calls body. rig_in_namespace() rigs namespaced function place, always verbose even called existing functions. especially handy package development. rigger() provides convenient way rig anonymous function using rigger(...) + function(...) {...} syntax.","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the Output of Intermediate Steps of a Call — boom","text":"","code":"boom(expr, clock = NULL, print = NULL)  rig(fun, clock = NULL, print = NULL)  rigger(clock = NULL, print = NULL)  rig_in_namespace(..., clock = NULL, print = NULL)"},{"path":"https://moodymudskipper.github.io/boomer/reference/boom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the Output of Intermediate Steps of a Call — boom","text":"expr call explode clock whether time intermediate steps. Defaults getOption(\"boomer.clock\") evaluated run time (FALSE unless change ). execution time step include execution time previously printed sub-steps. print function, formula list functions formulas, used modify way output printed. Defaults getOption(\"boomer.print\") evaluated run time (base::print unless change )'. fun function ro rig() ... Functions rig namespace print argument function, used print, transform output printed. Use invisible display nothing, useful possibilities str dplyr::glimpse. rlang's formula notation supported, instance can type: print = ~ dplyr::glimpse(., width = 50). Sometimes might want print specific type object custom way, case can provide named list, provide unnamed element used default, named elements define objects given S3 class printed. instance print = list(str, data.frame = tibble::as_tibble)","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the Output of Intermediate Steps of a Call — boom","text":"boom() returns output call. rig() returns modified input function. rig_in_namespace() returns invisible(NULL) called side effects. rigger() returns list containing arguments, class \"rigger\" enable +.rigger print.rigger","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the Output of Intermediate Steps of a Call — boom","text":"","code":"# explode a simple call boom(subset(head(mtcars, 2), qsec > 17)) #> 💣 subset(head(mtcars, 2), qsec > 17)  #> · 💣 💥 head(mtcars, 2)  #> ·               mpg cyl disp  hp drat    wt  qsec vs am gear carb #> · Mazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4 #> · Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4 #> ·  #> · 💣 💥 qsec > 17  #> · [1] FALSE  TRUE #> ·  #> 💥 subset(head(mtcars, 2), qsec > 17)  #>               mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4 #>  #>               mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4  # clock calls and customize how to print output boom(subset(head(mtcars, 2), qsec > 17), clock = TRUE, print = str) #> 💣 subset(head(mtcars, 2), qsec > 17)  #> · 💣 💥 head(mtcars, 2)  #> time: 0.155 ms #> · 'data.frame':\t2 obs. of  11 variables: #> ·  $ mpg : num  21 21 #> ·  $ cyl : num  6 6 #> ·  $ disp: num  160 160 #> ·  $ hp  : num  110 110 #> ·  $ drat: num  3.9 3.9 #> ·  $ wt  : num  2.62 2.88 #> ·  $ qsec: num  16.5 17 #> ·  $ vs  : num  0 0 #> ·  $ am  : num  1 1 #> ·  $ gear: num  4 4 #> ·  $ carb: num  4 4 #> ·  #> · 💣 💥 qsec > 17  #> time: 0.009 ms #> ·  logi [1:2] FALSE TRUE #> ·  #> 💥 subset(head(mtcars, 2), qsec > 17)  #> time: 0.267 ms #> 'data.frame':\t1 obs. of  11 variables: #>  $ mpg : num 21 #>  $ cyl : num 6 #>  $ disp: num 160 #>  $ hp  : num 110 #>  $ drat: num 3.9 #>  $ wt  : num 2.88 #>  $ qsec: num 17 #>  $ vs  : num 0 #>  $ am  : num 1 #>  $ gear: num 4 #>  $ carb: num 4 #>  #>               mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4  # print str only for data frames boom(subset(head(mtcars, 2), qsec > 17), print = list(data.frame = str)) #> 💣 subset(head(mtcars, 2), qsec > 17)  #> · 💣 💥 head(mtcars, 2)  #> · 'data.frame':\t2 obs. of  11 variables: #> ·  $ mpg : num  21 21 #> ·  $ cyl : num  6 6 #> ·  $ disp: num  160 160 #> ·  $ hp  : num  110 110 #> ·  $ drat: num  3.9 3.9 #> ·  $ wt  : num  2.62 2.88 #> ·  $ qsec: num  16.5 17 #> ·  $ vs  : num  0 0 #> ·  $ am  : num  1 1 #> ·  $ gear: num  4 4 #> ·  $ carb: num  4 4 #> ·  #> · 💣 💥 qsec > 17  #> · [1] FALSE  TRUE #> ·  #> 💥 subset(head(mtcars, 2), qsec > 17)  #> 'data.frame':\t1 obs. of  11 variables: #>  $ mpg : num 21 #>  $ cyl : num 6 #>  $ disp: num 160 #>  $ hp  : num 110 #>  $ drat: num 3.9 #>  $ wt  : num 2.88 #>  $ qsec: num 17 #>  $ vs  : num 0 #>  $ am  : num 1 #>  $ gear: num 4 #>  $ carb: num 4 #>  #>               mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4  # rig an existing function rig(ave)(warpbreaks$breaks, warpbreaks$wool) #> `FUN()` is undefined outside of `ave()` and its output might not be shown. #> 👇 ave #> 💣 if (missing(...)) {...  #> · ... : #> · <...> #> · 💣 💥 missing(...)  #> · [1] FALSE #> ·  #> · 💣 💥 interaction(..., drop = TRUE)  #> ·  [1] A A A A A A A A A A A A A A A A A A A A A A A A A A A B B B B B B B B B B B #> · [39] B B B B B B B B B B B B B B B B #> · Levels: A B #> ·  #> · 💣 lapply(split(x, g), FUN)  #> · · x : #> · ·  [1] 26 30 54 25 70 52 51 26 67 18 21 29 17 12 18 35 30 36 36 21 24 18 10 43 28 #> · · [26] 15 26 27 14 29 19 29 31 41 20 44 42 26 19 16 39 28 21 39 29 20 21 24 17 13 #> · · [51] 15 15 16 28 #> · · 💣 💥 split(x, g)  #> · · $A #> · ·  [1] 26 30 54 25 70 52 51 26 67 18 21 29 17 12 18 35 30 36 36 21 24 18 10 43 28 #> · · [26] 15 26 #> · ·  #> · · $B #> · ·  [1] 27 14 29 19 29 31 41 20 44 42 26 19 16 39 28 21 39 29 20 21 24 17 13 15 15 #> · · [26] 16 28 #> · ·  #> · ·  #> · 💥 lapply(split(x, g), FUN)  #> · $A #> · [1] 31.03704 #> ·  #> · $B #> · [1] 25.25926 #> ·  #> ·  #> 💥 if (missing(...)) { #>      x[] <- FUN(x) #>    } else { #>      g <- interaction(..., drop = TRUE) #>      split(x, g) <- lapply(split(x, g), FUN) #>    }  #> $A #> [1] 31.03704 #>  #> $B #> [1] 25.25926 #>  #>  #> 👆 ave #>  [1] 31.03704 31.03704 31.03704 31.03704 31.03704 31.03704 31.03704 31.03704 #>  [9] 31.03704 31.03704 31.03704 31.03704 31.03704 31.03704 31.03704 31.03704 #> [17] 31.03704 31.03704 31.03704 31.03704 31.03704 31.03704 31.03704 31.03704 #> [25] 31.03704 31.03704 31.03704 25.25926 25.25926 25.25926 25.25926 25.25926 #> [33] 25.25926 25.25926 25.25926 25.25926 25.25926 25.25926 25.25926 25.25926 #> [41] 25.25926 25.25926 25.25926 25.25926 25.25926 25.25926 25.25926 25.25926 #> [49] 25.25926 25.25926 25.25926 25.25926 25.25926 25.25926  # rig an anonymous function fun1 <- rigger() + function(x) x + 1 + 2 # same as rig(function(x) x + 1 + 2)) fun1(1) #> 👇 e2 #> 💣 x + 1 + 2  #> · x : #> · [1] 1 #> · 💣 💥 x + 1  #> · [1] 2 #> ·  #> 💥 x + 1 + 2  #> [1] 4 #>  #> 👆 e2 #> [1] 4 fun2 <- rigger(TRUE, typeof) + function(x) x + 1 + 2 fun2(1) #> 👇 e2 #> 💣 x + 1 + 2  #> · x : #> · [1] \"double\" #> · 💣 💥 x + 1  #> time: 0.01 ms #> · [1] \"double\" #> ·  #> 💥 x + 1 + 2  #> time: 0.03 s #> [1] \"double\" #>  #> 👆 e2 #> [1] 4"},{"path":"https://moodymudskipper.github.io/boomer/reference/boom_on.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch ","title":"Switch ","text":"debugging function, call boom_on() subsequent calls boomed, call boom_off() return standard debugging.","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boom_on.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch ","text":"","code":"boom_on(clock = NULL, print = NULL)  boom_off()"},{"path":"https://moodymudskipper.github.io/boomer/reference/boom_on.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch ","text":"clock whether time intermediate steps. Defaults getOption(\"boomer.clock\") evaluated run time (FALSE unless change ). execution time step include execution time previously printed sub-steps. print function, formula list functions formulas, used modify way output printed. Defaults getOption(\"boomer.print\") evaluated run time (base::print unless change )'.","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boom_on.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Switch ","text":"Returns NULL invisibly, called side effects.","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boom_shinyApp.html","id":null,"dir":"Reference","previous_headings":"","what":"boom the reactive calls of a shiny app — boom_shinyApp","title":"boom the reactive calls of a shiny app — boom_shinyApp","text":"works just like shiny::shinyApp shiny::runApp exact parameters, except create/run modified app allows easier debugging.","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boom_shinyApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"boom the reactive calls of a shiny app — boom_shinyApp","text":"","code":"boom_shinyApp(   ui,   server,   onStart = NULL,   options = list(),   uiPattern = \"/\",   enableBookmarking = NULL )  boom_runApp(   appDir = getwd(),   port = getOption(\"shiny.port\"),   launch.browser = getOption(\"shiny.launch.browser\", interactive()),   host = getOption(\"shiny.host\", \"127.0.0.1\"),   workerId = \"\",   quiet = FALSE,   display.mode = c(\"auto\", \"normal\", \"showcase\"),   test.mode = getOption(\"shiny.testmode\", FALSE) )"},{"path":"https://moodymudskipper.github.io/boomer/reference/boom_shinyApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"boom the reactive calls of a shiny app — boom_shinyApp","text":"ui UI definition app (example, call fluidPage() nested controls). bookmarking enabled (see enableBookmarking), must single argument function returns UI definition. server function three parameters: input, output, session. function called session ensuring app independent. onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. appDir Path directory contains Shiny app (.e. server.R file either ui.R www/index.html) port TCP port application listen . port specified, shiny.port option set (options(shiny.port = XX)), port used. Otherwise, use random port 3000:8000, excluding ports blocked Google Chrome considered unsafe: 3659, 4045, 5060, 5061, 6000, 6566, 6665:6669 6697. twenty random ports tried. launch.browser true, system's default web browser launched automatically app started. Defaults true interactive sessions . value parameter can also function call application's URL. host IPv4 address application listen . Defaults shiny.host option, set, \"127.0.0.1\" . See Details. workerId Can generally ignored. Exists help editions Shiny Server Pro route requests correct process. quiet Shiny status messages shown? Defaults FALSE. display.mode mode display application. set value \"showcase\", shows application code metadata DESCRIPTION file application directory alongside application. set \"normal\", displays application normally. Defaults \"auto\", displays application mode given DESCRIPTION file, . test.mode application launched test mode? used recording running automated tests. Defaults shiny.testmode option, FALSE option set.","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boom_shinyApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"boom the reactive calls of a shiny app — boom_shinyApp","text":"See ?shiny::shinyApp ?shiny::runApp","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boom_shinyApp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"boom the reactive calls of a shiny app — boom_shinyApp","text":"function work properly main server function always assigned object (usually name server). instance : server.R script, make sure assign function server use shinyServer, create server function separately use shinyServer call. also assumes follow standard practice use callModule() moduleServer().","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boomer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"boomer: Debugging Tools to Inspect the Intermediate Steps of a Call — boomer-package","title":"boomer: Debugging Tools to Inspect the Intermediate Steps of a Call — boomer-package","text":"Provides debugging tools let inspect intermediate results call. output looks explode call parts hence package name.","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boomer-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"boomer: Debugging Tools to Inspect the Intermediate Steps of a Call — boomer-package","text":"boom() displays intermediate results call code chunk. rig() creates copy function display intermediate results calls body. rig_in_namespace() rigs namespaced function place, always verbose even called existing functions. especially handy package development. rigger() provides convenient way rig anonymous function using rigger(...) + function(...) {...} syntax. addin \"Explode call 'boom()'\" provides way boom() call keyboard shortcut.","code":""},{"path":"https://moodymudskipper.github.io/boomer/reference/boomer-package.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"boomer: Debugging Tools to Inspect the Intermediate Steps of a Call — boomer-package","text":"Several options impact display exploded calls : boomer.print: print argument provided, option replace run time. Defaults base::print function. boomer.clock: clock argument provided, option replace run time. Defaults FALSE. boomer.print_args: Whether print arguments rigged functions values evaluated. Defaults TRUE. boomer.visible_only: Whether hide output functions return invisibly. Defaults FALSE. boomer.ignore: Vector function names named list functions want result printed (usually redundant). Defaults c(\"~\", \"{\", \"(\", \"<-\", \"<<-\", \"=\"). boomer.ignore_args: Vector function names named list functions want arguments boomed, might useful calling function loops many times. boomer.safe_print: Whether replace emoticons characters compatible systems. useful reprexes (see reprex package) knitted report case output look good system. boomer.abbreviate: Whether show function's name rather call entered.","code":""},{"path":[]},{"path":"https://moodymudskipper.github.io/boomer/reference/boomer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"boomer: Debugging Tools to Inspect the Intermediate Steps of a Call — boomer-package","text":"Maintainer: Antoine Fabri antoine.fabri@gmail.com","code":""},{"path":"https://moodymudskipper.github.io/boomer/news/index.html","id":"boomer-020","dir":"Changelog","previous_headings":"","what":"boomer 0.2.0","title":"boomer 0.2.0","text":"CRAN release: 2024-07-09 Just small release minor feature. previous version got kicked CRAN Suggests dependency {flow} kicked CRAN time. New boomer.ignore_args experimental option used boom function’s argument","code":""},{"path":"https://moodymudskipper.github.io/boomer/news/index.html","id":"boomer-011","dir":"Changelog","previous_headings":"","what":"boomer 0.1.1","title":"boomer 0.1.1","text":"CRAN release: 2022-09-16 Call boom_on() boom_off() browsing toggle “boom debugging” Call boom_shinyApp() boom_runApp() start shiny app {shiny}’s shinyApp() runApp(), making chosen reactives verbose (experimental). new vignette Another new vignette summarizing {boomer} works {boomer} doesn’t choke anymore case missing arguments Rigged function names displayed better rig called namespaced call","code":""},{"path":"https://moodymudskipper.github.io/boomer/news/index.html","id":"boomer-010","dir":"Changelog","previous_headings":"","what":"boomer 0.1.0","title":"boomer 0.1.0","text":"CRAN release: 2021-07-20 Call boom() explode call print outputs intermediate steps Call rig() set function call exploded clock argument clock steps print argument custom printing intermediate outputs Addin “Explode call boom()” boom() selection Call rigger() define anonymous rigged function Call rig_in_namespace() rig function place package Several options implemented customize output Output made readable, using indents emoticons names rigged functions displayed entered values arguments rigged functions displayed evaluated use {styler} display readable calls Robustness significantly improved","code":""}]
